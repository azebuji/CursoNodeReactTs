import express from 'express';

//A variavel app vai receber todas as funcionalidades do gerenciador de rotas "express" para dentro da variavel, claro que só depois que tiver dado os tipos para ela com o "npm install @type/express -D"
// o -D significa apenas que vou usar essa notação em ambiente de desenvolvimento, pois estou usando o modo TypeScript que logo se transforma em javascript
const app = express();

//para que o metodo express entenda json eu preciso usar um recurso dentro dele mesmo que o express.json() 
app.use(express.json());


//app.get comando para passar a rota do navegador e o que ele deve fazer como função
//no segundo parâmetro " a função" ele tem dois parâmetros o request e o response
//Request é usado para obter dados sobre a requisição ou seja obter os dados
//Respose server para devolver uma resposta para qualquer aplicação que esteja usando a aplicação

// ROTA: Endereço completo da requisição
// RECURSO: Qual entidade estamos acessando do sistema

// GET: Buscar uma ou mais informações do back-end
// POST: Criar uma nova informação no back-end
// PUT: Atualizar uma informação existente no back-end
// DELETE: Remover uma informação do back-end

// POST http://localhost:3333/users = Criar um usuario
// GET  http://localhost:3333/users = Listar usuários
// GET http://localhost:3333/users/5 = Buscar dados do usuário com ID 5

// Request Param: Parâmetros que vem na própria rota que identificam um recurso
// Query Param: Parâmetros que vem na própria rota geralmente opcionais para filtros, paginação
// Request body: Parâmetros para criação/atualização de informações

const users = [
    'Anderson',
    'Maira',
    'Jinx',
    'Sona',
    'Matilda'
];

app.get('/user', (request, response) => {
                   //Transformo tudo para string pq ele pode retornar um array
    const search = String(request.query.search);

    const filteredUsers = search ? users.filter(user => user.includes(search)) : users;
    //response.send("Hello World");

    //para retorno json eu troco send por json

    //O json pode retornar dois tipos de dados arrays ([]) ou objetos ({})
    //Sempre que eu usar o responde é importante usar o return, para que ele pare de executar e responda para o navegador
    return response.json(filteredUsers);
})

app.get('/user/:id',(request, response) => {
    //crio uma variavel constante com o nome id
    //formato uso a função Number para transformar tudo o que vier dentro do argumento em número
    //request para pegar algo passado como requisição via url
    //params que é para pegar os parâmetros que foram passado 
    //e por último o que foi passado, no caso o id pois o que foi passado via recurso foi :id
    const id = Number(request.params.id);

    const user = users[id];

    return response.json(user);

});

app.post('/user',(request, response) =>{
    const data = request.body;
    console.log(data);
    const user = {
        name: 'Xilindrina',
        email: 'xilidrica@gmail.com'
    };

    //Sempre colocar return para os response
    //Força que a requisição pare aqui
    return response.json(user);
});


//Aqui eu defino qual é a porta que ele vai escutar
app.listen(3333);

//Porêm esse código só vai funcionar se eu colocar uma dependência que faça a decodificação de ts para js o ts-node

//então devo instalar:
    // "npm install ts-node -D" e o typeScript "npm install typescript -D"

//logo preciso criar o arquivo de configuração do type script passando o comando:
    // "npx tsc --init"

//depois disso eu executo o comando npx, quesão os binários dentro da pasta node_modules e o caminho do arquivo que eu quero executar:
    // "npx ts-node src/server.ts"
    //obs isso quando não tiver ainda instalando o pacote ts-node-dev

//1* Outra coisa que é interessante é instalar um pacote para desenvolvedor que fica observando se houveram alterações no código para assim executar denovo, 
//assim não preciso ficar parando a aplicação e iniciando ela denovo
    // "npm install ts-node-dev -D"

//2* Após instalar o pacote posso dar o comando npx ts-node-dev [caminho do arquivo que quero que execute]
//posso também colocar o caminho do arquivo no package.json na chave script  e executar com o comando abaixo:
    //npm run [nome que foi dado na parte de scripts]