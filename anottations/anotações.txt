Para criar um projeto com as configs padrões eu digito: 
    # npm init -y

o arquivo criado package.json além de ter o nome do projeto e versão, descrição etc... também serve para colocar todas as nossas dependências do projeto

Após iniciar o projeto, eu posso instalar um pacote que é responsável por gerenciar as rotas, o express, comando abaixo:
    # npm install express



----------------------------------------------------------------------------------------------------------------------------------------------------------------
import express from 'express';

//A variavel app vai receber todas as funcionalidades do gerenciador de rotas "express" para dentro da variavel, claro que só depois que tiver dado os tipos para ela com o "npm install @type/express -D"
// o -D significa apenas que vou usar essa notação em ambiente de desenvolvimento, pois estou usando o modo TypeScript que logo se transforma em javascript
const app = express();


//esse comando é para passar a rota do navegador e o que ele deve fazer como função
//no segundo parâmetro " a função" ele tem dois parâmetros o request e o response
//Request é usado para obter dados sobre a requisição ou seja obter os dados
//Respose server para devolver uma resposta para qualquer aplicação que esteja usando a aplicação
app.get('/user', (request, response) => {
    console.log("Listagem de usuários");
    //response.send("Hello World");

    //para retorno json eu troco send por json

    //O json pode retornar dois tipos de dados arrays ([]) ou objetos ({})
    response.json([
        'Anderson',
        'Maira',
        'Jinx',
        'Sona',
        'Matilda'
    ]);
})

//Aqui eu defino qual é a porta que ele vai escutar
app.listen(3333);

//Porêm esse código só vai funcionar se eu colocar uma dependência que faça a decodificação de ts para js o ts-node

//então devo instalar:
    // "npm install ts-node -D" e o typeScript "npm install typescript -D"

//logo preciso criar o arquivo de configuração do type script passando o comando:
    // "npx tsc --init"

//depois disso eu executo o comando npx, quesão os binários dentro da pasta node_modules e o caminho do arquivo que eu quero executar:
    // "npx ts-node src/server.ts"
    //obs isso quando não tiver ainda instalando o pacote ts-node-dev


//* Outra coisa que é interessante é instalar um pacote para desenvolvedor que fica observando se houveram alterações no código para assim executar denovo, assim não preciso ficar parando a aplicação e iniciando ela denovo
    // "npm install ts-node-dev -D"

//Após instalar o pacote posso dar o comando npx ts-node-dev [caminho do arquivo que quero que execute]
//posso também colocar o caminho do arquivo no package.json na chave script  e executar com o comando abaixo:
    //npm run [nome que foi dado na parte de scripts]

------------------------------------------------------------------------------------------------------------------------
Sobre react

1 - Tudo que começa com npx é pq eu estou mandando o pc executar um pacote do node, caso o mesmo não exista ele vai baixar e depois executalo

2 - para criar um projeto em react pronto e com o template em typescript tenho que digitar:
    * npx - que é basicamente o comando para executar os pacotes do node
    * create-react-app - agora o nome do pacote, que no caso este é o pacote padrão para projetos padrões de react prontos
    * web - o nome 
    * --template=typescript - e por último qual é o template que no caso como eu vou trabalhar com typescript já eu passo o typescript como template
O comando final ficaria assim: npx create-react-app web --template=typescript

//--------------------------BANCO DE DADOS ----------------------------------------

Para banco de dados eu posso usar o Knex que é uma ferramenta que faz a comunicação 
com o banco de dados em formato JS, pois assim é possível se comunicar com a maioria
dos banco de dados do mercado relacionais

assim eu posso após instalar o knex instalar qualquer banco de dados que eu queira





